com -> folder -> google -> 
					create folders inside google ->
								controller
								dao
								bean
								util


start -> page  ? 
	Signup 
	Login 
	
	SessionController -> login , signup , forgetpassword 

create 1 class with name SessionController inside controller folder 

how to open signup ->
1) create controller if not 
2) create view file -- jsp{html+java} | html 
	jsp -> view file --> browser -> we can write HTML + JAVA 
	java server pages / java servlet pages 
	
	views ->folder -> new -> jsp -> Signup.jsp 
	now create form with fields 
	
now create controller SessionController if not 
inside SessionController we create 1 method that open Signup jsp for us 

	@GetMapping("/signup")
	public String signup() {

		return "Signup";
	}		

----------------------------------------------------------------
how to create jsp file ? 
file -> new -> other -> jsp
 	
	i dont have option for jsp
		install jps plugins from eclipe market place 
			steps :	
				click on Help menu -> click eclipse market place -> click on popular->
						you can see java ee or web developer tools now click on install button 
								-> now just do next / yes / accept etc 
								-> we dont need to select any package or tools if they ask
								--> finish 
			once installation done restart your STS and check you have your jsp option 
			
			
			
----------------------------------------------------------------
			
configure below properties in application.properties 
	1) server port 
	2) views ? jsp 
	3)* database 
	
				
we need to add jsp lib for spring boot app => 
	then only we can access jsp
	
	inside pom.xml we need to add 
		dependency under the dependencies tag 
						

Task : 
	create 1 url /login 
		login url will open Login.jsp
				Login.jsp have form with 1) email 2) password and 3) Submit button 
----------------------------------------------------------------
read data from client we need to create method in controller with @Postmapping 
also create a bean with field and getters and setters. 
pass that bean in method's argument. 
----------------------------------------------------------------
1) input 
	jsp open 
	controller @Getmapping("/signup")
		return Signup 
2)	fn ln em pwd 
		submit -->
	@Postmapping("/saveuser")
	signup jsp read -> process -> response 
3)	Output [ jsp ] Login jsp 

----------------------------------------------------------------
signup data --> 
		server -->	
				1) validation
				2) DBValidation - duplicate 
				3) DbConnection
				4) InsertQuery 
				5) Response --> Login  				


----------------------------------------------------------------
DbConnection 

	
	open mysql 
	
	database create 
	
	create database ecomapp; 
	
	use ecomapp; 
	
	create table users (
		userId integer primary key auto_increment,
		firstName varchar(30),
		lastName varchar(30),
		email varchar(50),
		password varchar(80),
		role integer
	);
	
	1 -> admin 
	2 -> user/buyer 
	
	desc users;
	
-----------
spring Boot app => dbConnection 


	1) db [mysql] driver  => jar => maven  [ mysql connector ] 
	2) query execute  => jar   spring 	   [ spring jdbc ] 
	3) application.properties -> dbConnection
					1) driver 
					2) url 
					3) userName
					4) password 
	spring -> edit starter ->  Mysql Driver , Jdbc Api , Spring Data Jdbc 
	
	
	
-----------
	insert into users (firstName,lastName,email,password,role) 
	values ('ram','sita','ram@sita.com','ravan');


---------------------------------------------------------------
23-02-2023:-

	1) create authenitcateUser() method in UserDao 
	2) call  authenitcateUser() method from SessionController::authenticate() 
	3) check your user for null , if null then redirect to login page 
							      if not null then redirect to home page 
							      

	4) if user is null then set error message for Login jsp 
			4.1) to set any message we need to use Model ,  method's argument [  Model model ] 
			4.2) model.addAttribute("error","Invalid Credentials"); 
	
	5) now we can read error in Login.jsp 
		5.1) using EL [ expression language] we can read error msg. 
		5.2)  ${error}	
		
	6)* when You run Login.jsp 
			if you get ${error} in Jsp Page then you need to 
					isELIgnored="false"
			int <%@page %> top of the jsp 
		e.g 	
		<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
			pageEncoding="ISO-8859-1"  isELIgnored="false"%>	
	

---------------------------------------------------------------

	ecom ->  admin , buyer 
	
			admin login -> AdminDashboard 
			buyer login ->  Home 
			

	create two controller 
		AdminController 
		BuyerController 
		
	



------------------------------------------------------------------
Task :
	controller --> 
			CategoryController 
					1) open jsp 
						newcategory 
							Category Name [   ] 
								[submit] 
					2) savecategory 
							print category name which is input by user 
							return "NewCategory" 

			exp :
				category -> automobile 
							restaurant 
							household 
				subcategory -> fuel , service , puncture , 
							-> snacks , dinner , lunch 
							-> grocery , dailycare , 			


			VendorController 
				newvendor
					Vendor Name [ Dmart ] 
						[submit ] 
						
													
			
----------------------------------------------------------------------------------
24-2-2023

https://us02web.zoom.us/rec/share/mXWC4tAP4PfC7hUavl79x24h_AoAwvW33TONeLoUhmAY-el9wrslFWCKTU54bulj.RwKi4VZEqPej5jeI?startTime=1677210718000
Passcode: U..hiKm3

https://us02web.zoom.us/rec/share/IU-ibz2SiYjm7Bqx3g-6FErpcqv5IKpIPtPVQQI9tUlGeT1OSb0syoTsrrsxQAY.uKU5aEAtaICV93UN?startTime=1677217103000
Passcode: mmVi$U7L

user -> forgetpassword link click ->
				forgetpassword url 
						ForgetPassword.jsp 
								email 
									submit 
									
				url ->sendotpforforgetpassword					
				1) email read 
				2) db present ? 
					2.1) yes -> generate otp -> user table otp save -> send email for otp -> s
					2.2) no  -> error 	
			
	
	
how to send email using gmail 

	1) gmail -> mail -> lib -> jar 
	2) gmail configuration 
	3) java 
	
	
--------------------------------------------------------
27-02-2023

1) create category table - database 
2) now create =>  CategoryBean , CategoryDao , CategoryController 
3) categorycontroller -> newcategory url 
4) categorycontroller -> savecategory url 
	4.1) categoryDao -> addCategory() 
	
5) listcategories -> url 
	5.1) categoryDao->getAllCAtegory() { List } 
		

























	
	
	
	
	
	
	
	